# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# 
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
# 
# http://aws.amazon.com/apache2.0
# 
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.

# Target AWS region, defaults to us-east-1 if not provided. Note that some global system components
# (e.g. Lambda@Edge) are always deployed via a stack in us-east-1 no matter the setting here.
awsRegion: us-east-1

# AWS profile to use for deployment; if not specified here, defaults to using the same credentials
# the AWS CLI is set up to use (either a profile in ~/.aws/config or an instance role if on EC2).
awsProfile:

# The short solution name is used to namespace a few AWS resources. Try to keep this
# setting short to avoid hitting long strings issues; the default should be fine in most cases,
# but if multiple separate instances of the system are deployed within a single account,
# this name can be changed to ensure they are disambiguated.
#solutionName:

# The environment name where you want to deploy the solution to. Normally this defaults to
# the serverless stage name and should be left unchanged here.
# This is also used for creating a namespace for resources. Usually, this is same as serverless "stage".
# All resource names reference "envName" instead of directly using "opt:stage".
# This indirection allows for easy incorporation of extra variables in the "envName", if required.
# For example, if the same solution needs to be deployed across multiple AWS accounts we can easily
# add account specific variable in "envName" for keeping the namespace specific to each account.
#envName: ${opt:stage}

# The environment type (e.g. dev, demo, prod). This is for grouping multiple environments
# into types. For example, all developers' environments can be of type "dev". This can be
# used for enabling conditionals in code that might need to be different between dev and
# production builds (for example, enabling CORS for localhost for local development).
# Defaults to prod if unspecified.
envType: dev

# THIS SETTING IS ONLY APPLICABLE FOR LOCAL DEVELOPMENT
# A flag indicating if lambda function role's trust policy (assume role policy) should be automatically adjusted to
# allow assuming the role from local machine (applicable only for local development)
# localRoleAutoAdjustTrust: true

# ================================ Settings required by base-rest-api ===========================================
# Feature flag to enable/disable default encryption on DynamoDB tables via AWS owned keys
# Customers who want to manage their own KMS keys should set this to true
# Customers who want to use AWS-owned and managed keys should set this to false
useCmkDynamoDbEncryption: false

adminPrincipals: '[{"email": "success@simulator.amazonses.com", "firstName": "First", "lastName": "Last"}]'

# ================================ Settings required for private VPC ===========================================
# Set these values if you wish for installer hosts, appstream image builder and related assets to be deployed
# into an existing VPC. If these settings are left unchanged, a new VPC will be created for the solution.

# The Id of the existing VPC the solution should use.
# vpcId: ''

# The Ids of two private subnets within the VPCs. Each subnet should have access to a NAT Gateway connected to
# an Internet Gateway. This should be in the form of 'subnet-XXXXXXXXXXXXXXXXX,subnet-XXXXXXXXXXXXXXXXX'.
# subnetIds: ''

# The availability zones in which the subnets exist. For instance, 'us-east-1a,us-east-1b'.
# availabilityZones: ''

# It is likely this should remain as 'false'. Setting this to 'true' with a private vpc will set the VAM APIs to only
# be accessible from callers from within the VPC supplied in 'vpcId'. The cloudfront distribution will still
# successfully deploy in this case, but it will not be usable.
# usePrivateApi: 'false'

# ================================ CICD Pipeline Settings ===========================================
# These settings are specific to configuring CICD pipelines for development purposes and are generally
# not useful for most deployments.

# vam-silky-smooth-deployment pipeline settings
# These settings add generation of a handoff package for silky-smooth-deployments in the cicd pipeline

# the name of the version enabled S3 Bucket which holds the license files.
# licenseBucketName: ''

# the key for the S3 Object which holds the license files
# licenseObjectKey: ''

# the name of the CodeCommit repository which holds the packaging script
# packagingScriptRepo: ''

# the name of the branch which holds the version of the packaging script to be utilized
# packagingScriptBranch: 'master'

