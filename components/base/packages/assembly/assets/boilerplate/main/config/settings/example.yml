# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# 
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
# 
# http://aws.amazon.com/apache2.0
# 
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.

# Target AWS region, defaults to us-east-1 if not provided. Note that some global system components
# (e.g. Lambda@Edge) are always deployed via a stack in us-east-1 no matter the setting here.
awsRegion: us-east-1

# AWS profile to use for deployment; if not specified here, defaults to using the same credentials
# the AWS CLI is set up to use (either a profile in ~/.aws/config or an instance role if on EC2).
awsProfile:

# The short solution name is used to namespace a few AWS resources. Try to keep this
# setting short to avoid hitting long strings issues; the default should be fine in most cases,
# but if multiple separate instances of the system are deployed within a single account,
# this name can be changed to ensure they are disambiguated.
#solutionName:

# The environment name where you want to deploy the solution to. Normally this defaults to
# the serverless stage name and should be left unchanged here.
# This is also used for creating a namespace for resources. Usually, this is same as serverless "stage".
# All resource names reference "envName" instead of directly using "opt:stage".
# This indirection allows for easy incorporation of extra variables in the "envName", if required.
# For example, if the same solution needs to be deployed across multiple AWS accounts we can easily
# add account specific variable in "envName" for keeping the namespace specific to each account.
#envName: ${opt:stage}

# The environment type (e.g. dev, demo, prod). This is for grouping multiple environments
# into types. For example, all developers' environments can be of type "dev". This can be
# used for enabling conditionals in code that might need to be different between dev and
# production builds (for example, enabling CORS for localhost for local development).
# Defaults to prod if unspecified.
envType: dev

# THIS SETTING IS ONLY APPLICABLE FOR LOCAL DEVELOPMENT
# A flag indicating if lambda function role's trust policy (assume role policy) should be automatically adjusted to
# allow assuming the role from local machine (applicable only for local development)
# localRoleAutoAdjustTrust: true
