# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# 
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
# 
# http://aws.amazon.com/apache2.0
# 
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.

version: 1.0.0

# Mappings of AWS regions to short names to be used in resource naming
regionShortNamesMap:
  'us-east-2': 'oh'
  'us-east-1': 'va'
  'us-west-1': 'ca'
  'us-west-2': 'or'
  'ap-east-1': 'hk'
  'ap-south-1': 'mum'
  'ap-northeast-3': 'osa'
  'ap-northeast-2': 'sel'
  'ap-southeast-1': 'sg'
  'ap-southeast-2': 'syd'
  'ap-northeast-1': 'ty'
  'ca-central-1': 'ca'
  'cn-north-1': 'cn'
  'cn-northwest-1': 'nx'
  'eu-central-1': 'fr'
  'eu-west-1': 'irl'
  'eu-west-2': 'ldn'
  'eu-west-3': 'par'
  'eu-north-1': 'sth'
  'me-south-1': 'bhr'
  'sa-east-1': 'sao'
  'us-gov-east-1': 'gce'
  'us-gov-west-1': 'gcw'

# The default region to deploy to
awsRegion: us-east-1

# The environment name where you want to deploy the solution to. (e.g. developer1, developer2, demo, prod etc.)
# This is also used for creating a namespace for resources. Usually, this is same as serverless "stage".
# All resource names reference "envName" instead of directly using "opt:stage".
# This indirection allows for easy incorporation of extra variables in the "envName", if required.
# For example, if the same solution needs to be deployed across multiple AWS accounts we can easily
# add account specific variable in "envName" for keeping the namespace specific to each account.
envName: ${opt:stage}

# Short region name
# This is used in the namespace to avoid naming collisions to allow deploying the same solution across multiple regions
# Currently using the ISO country code or state code or city abbreviation as short name of the region
# See "regionShortNamesMap" defined above.
# The above mapping needs to be updated when deploying to any region other than the ones listed above in future
awsRegionShortName: ${self:custom.settings.regionShortNamesMap.${self:custom.settings.awsRegion}}

# This prefix is used for naming various resources
namespace: ${self:custom.settings.envName}-${self:custom.settings.awsRegionShortName}-${self:custom.settings.solutionName}

# This is the namespace for naming resources that have global namespace such as S3 bucket names
globalNamespace: ${self:custom.settings.awsAccountInfo.awsAccountId}-${self:custom.settings.namespace}

# Name of the deployment bucket. The serverless framework uploads various artifacts to this bucket.
# These artifacts include things like Lambda function code ZIP files, AWS CloudFormation Templates etc
deploymentBucketName: ${self:custom.settings.globalNamespace}-artifacts

# Bucket policy for the deployment bucket.
deploymentBucketPolicy:
  {
    'Version': '2008-10-17',
    'Statement':
      [
        {
          'Sid': 'Deny requests that do not use TLS',
          'Effect': 'Deny',
          'Principal': '*',
          'Action': 's3:*',
          'Resource': 'arn:aws:s3:::${self:custom.settings.deploymentBucketName}/*',
          'Condition': { 'Bool': { 'aws:SecureTransport': 'false' } },
        },
        {
          'Sid': 'Deny requests that do not use SigV4',
          'Effect': 'Deny',
          'Principal': '*',
          'Action': 's3:*',
          'Resource': 'arn:aws:s3:::${self:custom.settings.deploymentBucketName}/*',
          'Condition': { 'StringNotEquals': { 's3:signatureversion': 'AWS4-HMAC-SHA256' } },
        },
        {
          'Sid': 'Deny object uploads not using default encryption settings',
          'Effect': 'Deny',
          'Principal': '*',
          'Action': 's3:PutObject',
          'Resource': 'arn:aws:s3:::${self:custom.settings.deploymentBucketName}/*',
          'Condition':
            {
              'Null': { 's3:x-amz-server-side-encryption': 'false' },
              'StringNotEqualsIfExists': { 's3:x-amz-server-side-encryption': 'AES256' },
            },
        },
      ],
  }

# The short solution name is used to namespace a few AWS resources
# Try to keep this setting short to avoid hitting long strings issues
solutionName:

# The environment type (e.g. dev, demo, prod). This is for grouping multiple environments
# into types. For example, all developers' environments can be of type "dev". This can be
# used for enabling conditionals in code that might need to be different between dev and
# production builds (for example, enabling CORS for localhost for local development).
envType: dev

# This prefix is used to construct the full name of a table
dbPrefix: ${self:custom.settings.namespace}

# Root path in parameter store for parameters used by this solution.
paramStoreRoot: '${self:custom.settings.envName}/${self:custom.settings.solutionName}'

# THIS SETTING IS ONLY APPLICABLE FOR LOCAL DEVELOPMENT
# A flag indicating if lambda function role's trust policy (assume role policy) should be automatically adjusted to
# allow assuming the role from local machine (applicable only for local development)
localRoleAutoAdjustTrust: true
