# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# 
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
# 
# http://aws.amazon.com/apache2.0
# 
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.

Conditions:
  DeployPackagingPipeline: !Not [!Equals ['${self:custom.settings.packagingScriptRepo}', '']]

Resources:
  AppArtifactBucketPolicy:
    Condition: DeployPackagingPipeline
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: ${self:custom.settings.sourceCicdAppArtifactBucketName}
      PolicyDocument:
        Statement:
          - Action:
            - S3:*
            Effect: Allow
            Resource:
              - !Sub arn:aws:s3:::${AppArtifactBucket}
              - !Sub arn:aws:s3:::${AppArtifactBucket}/*
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root

  LicenseBucketPolicy:
    Condition: DeployPackagingPipeline
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: '${self:custom.settings.licenseBucketName}'
      PolicyDocument:
        Statement:
          - Action:
            - S3:*
            Effect: Allow
            Resource:
              - 'arn:aws:s3:::${self:custom.settings.licenseBucketName}'
              - 'arn:aws:s3:::${self:custom.settings.licenseBucketName}/*'            
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:role/${AppPipelineRole}
  
  # IAM Policies to allow AppPipelineRole to package vam-silky-smooth-deployment
  PackagingPipelineRepoAccessPolicy:
    Condition: DeployPackagingPipeline
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
            - 'codecommit:GetBranch'
            - 'codecommit:GetCommit'
            - 'codecommit:GetRepository'
            - 'codecommit:GitPull'
            Effect: 'Allow'
            Resource:
              - !Sub 'arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:${self:custom.settings.packagingScriptRepo}'

  PackagingPipelineLicenseBucketAccessPolicy:
    Condition: DeployPackagingPipeline
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
            - 's3:GetObject'
            - 's3:GetObjectVersion'
            - 's3:ListBucket'
            - 's3:GetBucketPolicy'
            - 's3:HeadObject'
            Effect: 'Allow'
            Resource:
              - 'arn:aws:s3:::${self:custom.settings.licenseBucketName}'
              - 'arn:aws:s3:::${self:custom.settings.licenseBucketName}/*'

  AppPipelineRole:
    Properties:
      ManagedPolicyArns:
        - !If 
          - DeployPackagingPipeline
          - !Ref PackagingPipelineRepoAccessPolicy
          - !Ref AWS::NoValue
        - !If 
          - DeployPackagingPipeline
          - !Ref PackagingPipelineLicenseBucketAccessPolicy
          - !Ref AWS::NoValue
  
  PackagePipeline:
    Condition:
      DeployPackagingPipeline
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub
        - '${Namespace}-${RepoBranch}-packaging'
        - Namespace: '${self:custom.settings.globalNamespace}'
          RepoBranch: !Join ['-', !Split ['/', '${self:custom.settings.repoBranch}']]
      RoleArn: !GetAtt AppPipelineRole.Arn
      ArtifactStore:
        Location: !Ref AppArtifactBucket
        Type: S3
        EncryptionKey:
          Id: !GetAtt ArtifactBucketKey.Arn
          Type: KMS
      Stages:
        - Name: 'Download-Source'
          Actions:
            - Name: 'CodeCommitSource'
              RunOrder: 1
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: '1'
              Configuration:
                RepositoryName: '${self:custom.settings.repoName}'
                BranchName: '${self:custom.settings.repoBranch}'
                PollForSourceChanges: 'false'
                OutputArtifactFormat: 'CODEBUILD_CLONE_REF'
              OutputArtifacts:
                - Name: 'SourceCodeCommitArtifact'
            - Name: 'CodeCommitScriptSource'
              RunOrder: 2
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: '1'
              Configuration:
                RepositoryName: '${self:custom.settings.packagingScriptRepo}'
                BranchName: '${self:custom.settings.packagingScriptBranch}'
                PollForSourceChanges: false
                OutputArtifactFormat: CODEBUILD_CLONE_REF
              OutputArtifacts:
                - Name: EEProdScriptsArtifact
            - Name: 'License-Download'
              RunOrder: 3
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: '1'
              Configuration:
                S3Bucket: '${self:custom.settings.licenseBucketName}'
                S3ObjectKey: '${self:custom.settings.licenseObjectKey}'
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: LicenseS3Artifact
              InputArtifacts: []
        - Name: Artifact
          Actions:
            - Name: Submodules
              RunOrder: 1
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref TargetEnvSubmodulesProject
              InputArtifacts:
                - !If
                  - UseCodeCommit
                  - Name: SourceCodeCommitArtifact
                  - Name: SourceGitHubArtifact
              OutputArtifacts:
                - Name: SourceSubmoduleArtifact
        - Name: 'Generate-Deployment-Package'
          Actions:
            - Name: 'Generate-Package'
              RunOrder: 1
              ActionTypeId:           
                Category: 'Build'
                Owner: 'AWS'
                Provider: 'CodeBuild'
                Version: '1'
              Configuration:
                ProjectName: !Ref 'DeployPackageGenProject'
                PrimarySource: 'SourceSubmoduleArtifact'
              InputArtifacts:
                - Name: 'SourceSubmoduleArtifact'
                - Name: 'EEProdScriptsArtifact'
                - Name: 'LicenseS3Artifact'
              OutputArtifacts:
                - Name: 'CustomerPackage'

  DeployPackageGenProject:
    Condition: DeployPackagingPipeline
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Artifacts:
        Type: 'CODEPIPELINE'
        ArtifactIdentifier: 'CustomerPackage'
      Source:
        Type: 'CODEPIPELINE'
        BuildSpec: 'components/vam-silky-smooth-deployments/packages/assembly/assets/deployables/cicd/cicd-pipeline/config/buildspec/buildspec-package.yml'
      Environment:
        ComputeType: 'BUILD_GENERAL1_LARGE'
        Type: 'LINUX_CONTAINER'
        Image: 'aws/codebuild/standard:5.0'
        EnvironmentVariables:
          - Name: 'ENV_NAME'
            Value: '${self:custom.settings.envName}'
          - Name: 'DEPLOYMENT_BUCKET'
            Value: '${self:custom.settings.deploymentBucketName}'
          - Name: 'TARGET_ACCOUNT_APP_DEPLOYER_ROLE_ARN'
            Value: '${self:custom.settings.targetAccountAppDeployerRoleArn}'
          - Name: 'BUILD_BRANCH'
            Value: '${self:custom.settings.repoBranch}'
          - Name: 'DROP_CUSTOMER'
            Value: '${self:custom.settings.dropCustomerName}'
      ServiceRole: !GetAtt 'AppPipelineRole.Arn'

  PackagePipelineTriggerRuleRole:
    Condition: DeployPackagingPipeline
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'events.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'PipelineOperationalPermissions'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'codepipeline:StartPipelineExecution'
                Resource: !Sub 'arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${PackagePipeline}'

  PackagePipelineEventRule:
    Condition: DeployPackagingPipeline
    Type: 'AWS::Events::Rule'
    Properties:
      Name: '${self:custom.settings.namespace}-codecommit-trigger-packaging-pipeline'
      Description: !Sub
        - 'Amazon EventBridge event rule to trigger the CodePipeline for [${self:custom.settings.solutionName}] and [${self:custom.settings.envName}]: ${PipelineName}'
        - PipelineName: !Ref 'PackagePipeline'
      EventPattern:
        source: [ 'aws.codepipeline' ]
        detail-type: [ 'CodePipeline Pipeline Execution State Change' ]
        resources:
          - !Sub 'arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${AppPipeline}'
        detail:
          state: [ 'SUCCEEDED' ]
      State: 'ENABLED'
      Targets:
        - Id: 'BuildPipeline'
          Arn: !Sub 'arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${PackagePipeline}'
          RoleArn: !GetAtt 'PackagePipelineTriggerRuleRole.Arn'