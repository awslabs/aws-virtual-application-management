# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# 
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
# 
# http://aws.amazon.com/apache2.0
# 
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.

Conditions:
  UseVpc: !Not
    - !Equals ['${self:custom.settings.vpcId}', '']
  UseCmkEncryption: !Not [!Equals ['${self:custom.settings.useCmkDynamoDbEncryption}', false]]

Resources:
  # =============================================================================================
  # IAM Roles
  # =============================================================================================

  # IAM Policy for AWS CloudWatch Log access by the Lambda functions
  CwlLambdaPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource:
            - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${self:service}-${self:custom.settings.envName}-*'
            - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${self:service}-${self:custom.settings.envName}-*:log-stream:*'

  # IAM Policy for AWS Lambda to attach to VPC
  VpcLambdaPolicy:
    Condition: UseVpc
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            - ec2:AssignPrivateIpAddresses
            - ec2:UnassignPrivateIpAddresses
          Resource: '*'

  # IAM Role for the postDeployment Function
  RolePostDeploymentLambda:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: ${self:custom.settings.postDeploymentRoleName}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref CwlLambdaPolicy
        - !If
          - UseVpc
          - !Ref VpcLambdaPolicy
          - !Ref AWS::NoValue
        - !If
          - UseCmkEncryption
          - !Sub ${self:custom.settings.dynamoDbKmsAccessPolicyArn}
          - !Ref AWS::NoValue
      Policies:
        - PolicyName: db-access
          PolicyDocument:
            Statement:
              Sid: dbaccess
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:DeleteItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource:
                - !GetAtt [DbDeploymentStore, Arn]
        - PolicyName: serverless-deployment-bucket-access-logging
          PolicyDocument:
            Statement:
              - Effect: 'Allow'
                Action:
                  - s3:GetBucketLogging
                  - s3:PutBucketLogging
                  - s3:ListBucket
                Resource:
                  - 'arn:aws:s3:::${self:custom.settings.deploymentBucketName}'

  # =============================================================================================
  # Dynamo db
  # =============================================================================================
  DbDeploymentStore:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ${self:custom.settings.dbDeploymentStore}
      AttributeDefinitions:
        - AttributeName: 'type'
          AttributeType: 'S'
        - AttributeName: 'id'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'type'
          KeyType: 'HASH'
        - AttributeName: 'id'
          KeyType: 'RANGE'
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification: !If
        - UseCmkEncryption
        - SSEEnabled: true
          # When "useCmkDynamoDbEncryption" setting is false (i.e., when "UseCmkEncryption" condition is false)
          # the "DynamoDbKmsKeyAliasArn" output may NOT exists in the backend stack.
          # This will cause the serverless packaging step to fail because it will attempt to read non-existent CFN output
          # Default to emtpy string to handle this case
          KMSMasterKeyId: ${cf:${self:custom.settings.backendStackName}.DynamoDbKmsKeyAliasArn,''}
          SSEType: 'KMS'
        - SSEEnabled: false

# =============================================================================================
# Outputs
# =============================================================================================
Outputs:
  PostDeploymentRoleArn:
    Value: !GetAtt RolePostDeploymentLambda.Arn
